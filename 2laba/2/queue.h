/* Дан набор из 10 чисел. Создать две очереди: первая должна содержать числа из
исходного набора с нечетными номерами (1, 3, …, 9), а вторая — с четными (2, 4, …, 10);
порядок чисел в каждой очереди должен совпадать с порядком чисел в исходном наборе.
Вывести указатели на начало и конец первой, а затем второй очереди.
Для каждой динамической структуры должен быть предусмотрен стандартный набор методов - 
добавления/удаления/вывода элементов. 
Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.
В заданиях данной подгруппы структура «очередь» (queue) моделируется цепочкой связанных
узлов-записей типа TNode. Поле Next последнего элемента цепочки равно nullptr. Началом
очереди («головой», head) считается первый элемент цепочки, концом («хвостом», tail) — ее
последний элемент. Для возможности быстрого добавления в конец очереди нового элемента
удобно хранить, помимо указателя на начало очереди, также и указатель на ее конец. В случае
пустой очереди указатели на ее начало и конец полагаются равными nullptr. Как и для стека,
значением элемента очереди считается значение его поля Data.
*/

#ifndef QUEUE_H
#define QUEUE_H

#include <iostream>

/**
 * @struct Node
 * @brief Узел очереди
 * 
 * Содержит данные и указатель на следующий узел
 */
struct Node {
    int value;      ///< Значение узла
    Node* next;     ///< Указатель на следующий узел
};

/**
 * @class Queue
 * @brief Класс очереди, реализованный на связном списке
 * 
 * Предоставляет стандартные операции работы с очередью: enqueue, dequeue и другие
 */
class Queue {
private:
    Node* head;     ///< Указатель на начало очереди
    Node* tail;     ///< Указатель на конец очереди

public:
    /**
     * @brief Конструктор очереди
     */
    Queue();
    
    /**
     * @brief Деструктор очереди
     * 
     * Автоматически очищает память при уничтожении очереди
     */
    ~Queue();
    
    /**
     * @brief Инициализация очереди
     */
    void Initialize();
    
    /**
     * @brief Добавление элемента в конец очереди
     * @param number Значение для добавления
     */
    void Enqueue(int number);
    
    /**
     * @brief Удаление элемента из начала очереди
     */
    void Dequeue();
    
    /**
     * @brief Вывод всех элементов очереди
     */
    void Print();
    
    /**
     * @brief Вывод указателей на начало и конец очереди
     */
    void PrintPointers();
};

#endif // QUEUE_H
